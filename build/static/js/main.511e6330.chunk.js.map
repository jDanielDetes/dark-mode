{"version":3,"sources":["components/Chart.jsx","components/Charts.jsx","hooks/useDarkMode.js","hooks/useLocalStorage.js","components/Navbar.jsx","index.js"],"names":["Chart","_ref","sparklineData","formattedData","map","price","idx","timeToSubtract","value","date","moment","subtract","format","length","filter","data","react_default","a","createElement","es6","width","height","type","dataKey","stroke","strokeDasharray","interval","Charts","coinData","className","coin","key","name","symbol","src","image","alt","components_Chart","sparkline_in_7d","useDarkMode","initialValue","_useLocalStorage","_useState","useState","item","window","localStorage","getItem","JSON","parse","_useState2","Object","slicedToArray","storedValue","setStoredValue","setItem","stringify","useLocalStorage","_useLocalStorage2","dark","setDark","useEffect","document","querySelector","classList","add","remove","Navbar","_useDarkMode","_useDarkMode2","darkMode","setDarkMode","onClick","e","preventDefault","rootElement","getElementById","ReactDOM","render","setCoinData","axios","get","then","res","catch","err","console","log","components_Navbar","components_Charts"],"mappings":"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","file":"static/js/main.511e6330.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip\r\n} from \"recharts\";\r\n\r\nconst Chart = ({ sparklineData }) => {\r\n  const formattedData = sparklineData\r\n    .map((price, idx) => {\r\n      if (idx % 6 === 0) {\r\n        const timeToSubtract = 168 - idx;\r\n        const date = moment()\r\n          .subtract(timeToSubtract, \"hours\")\r\n          .format(\"ddd h:mma\");\r\n        return { value: price, date };\r\n      } else if (idx === sparklineData.length - 1) {\r\n        const date = moment().format(\"ddd h:mma\");\r\n        return { value: price, date };\r\n      }\r\n      return null;\r\n    })\r\n    .filter(data => data);\r\n\r\n  return (\r\n    <LineChart width={1100} height={300} data={formattedData}>\r\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\r\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n      <XAxis dataKey=\"date\" interval={3} />\r\n      <YAxis />\r\n      <Tooltip />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"./Chart\";\r\n\r\nconst Charts = ({ coinData }) => {\r\n  return (\r\n    <div className=\"charts\">\r\n      {coinData.map(coin => (\r\n        <div className=\"chart__container\" key={coin.name}>\r\n          <h2 className=\"coin__title\">{coin.name}</h2>\r\n          <h4 className=\"coin__symbol\">{coin.symbol}</h4>\r\n          <div className=\"coin__logo\">\r\n            <img src={coin.image} height=\"40\" alt={coin.name} />\r\n          </div>\r\n          <Chart sparklineData={coin.sparkline_in_7d.price} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default Charts;\r\n","import {useEffect} from 'react'\r\nimport {useLocalStorage} from './useLocalStorage'\r\n\r\nexport  const  useDarkMode= (key, initialValue)=>{\r\nconst[dark,setDark] = useLocalStorage('key, initialValue')\r\n\r\nuseEffect(()=>{\r\n    if(!dark) {\r\n        document.querySelector(\"body\").classList.remove('dark-mode')\r\n    } else {\r\n        document.querySelector('body').classList.add('dark-mode')\r\n    }\r\n\r\n},[dark,setDark])\r\nreturn [dark,setDark]\r\n}\r\n\r\n","import {useState} from 'react'\r\n\r\n\r\nexport const useLocalStorage = (key,initialValue)=>{\r\n\r\n    const[storedValue,setStoredValue] =useState( () =>{\r\n        const item= window.localStorage.getItem(key);\r\n        return item ? JSON.parse(item) : initialValue;\r\n    })\r\n    \r\n\r\n    const setValue = value =>{\r\n        setStoredValue(value)\r\n        window.localStorage.setItem(key, JSON.stringify(value))\r\n        }\r\n        return [storedValue, setStoredValue,setValue]\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport {useDarkMode} from  '../hooks/useDarkMode'\r\n\r\nconst Navbar = () => {\r\n  const [darkMode, setDarkMode] = useDarkMode(false);\r\n  const toggleMode = e => {\r\n    e.preventDefault();\r\n    setDarkMode(!darkMode);\r\n  };\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <h1>Crypto Tracker</h1>\r\n      <div className=\"dark-mode__toggle\">\r\n        <div\r\n          onClick={toggleMode}\r\n          className={darkMode ? 'toggle toggled' : 'toggle'}\r\n        />\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport Charts from \"./components/Charts\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst App = () => {\r\n  const [coinData, setCoinData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=true\"\r\n      )\r\n      .then(res => setCoinData(res.data))\r\n      .catch(err => console.log(err));\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Charts coinData={coinData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}